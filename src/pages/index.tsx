import { type NextPage } from "next";
import Head from "next/head";
// import Link from "next/link";
import { useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";
import { useState } from "react";
import App from "../Components/App";
import type { QBoard } from "../server/trpc/router/_app";
import Sidebar from "../Components/Sidebar";
import Navbar from "../Components/Navbar";

const Home: NextPage = () => {
  const [isLight, setIsLight] = useState<boolean>(() => {
    if (typeof window !== "undefined") {
      const isLight = localStorage.getItem("theme");
      if (isLight) return JSON.parse(isLight);
      localStorage.setItem("theme", "true");
    }
    return true;
  });
  const [showSideBar, setShowSidebar] = useState(false);
  const session = useSession();
  const initBoard = trpc.auth.getLatestBoard.useQuery(
    undefined, // no input
    { enabled: session.data?.user !== undefined }
  );

  // if (session.status === "loading" || session.status === "unauthenticated")
  //   return <div className="">auth</div>;

  if (initBoard.isLoading) return <div className="">Loading</div>;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        className={`${
          isLight ? "" : "dark"
        } flex  h-screen w-screen overflow-hidden`}
      >
        {showSideBar && (
          <Sidebar
            setShowSidebar={setShowSidebar}
            currentBoard={initBoard.data?.name || ""}
            boards={[initBoard.data?.name || "", "sweet thing", "I watch you"]}
            isLight={isLight}
            setIsLight={setIsLight}
          />
        )}
        <div className="h-full w-full">
          {/* Navbar */}
          <Navbar showSideBar={showSideBar} />
          <button onClick={() => setShowSidebar(true)}>showsidebar</button>
          <App
            isLight={isLight}
            setIsLight={setIsLight}
            initBoard={initBoard.data as QBoard}
          />
        </div>
      </div>
    </>
  );
};

export default Home;

// const AuthShowcase: React.FC = () => {
//   const { data: sessionData } = useSession();

//   const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
//     undefined, // no input
//     { enabled: sessionData?.user !== undefined }
//   );

//   return (
//     <div className="flex flex-col items-center justify-center gap-4">
//       <p className="text-2xl text-center text-white">
//         {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
//         {secretMessage && <span> - {secretMessage}</span>}
//       </p>
//       <button
//         className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
//         onClick={sessionData ? () => signOut() : () => signIn()}
//       >
//         {sessionData ? "Sign out" : "Sign in"}
//       </button>
//     </div>
//   );
// };
