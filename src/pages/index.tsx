import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";
import Button from "../Components/shared/Button";
import { useReducer, useState } from "react";
import reducer from "../state/appStateReducer";
import type { QBoard } from "../server/trpc/router/_app";

const Home: NextPage = () => {
  const [isLight, setIsLight] = useState<boolean>(() => {
    if (typeof window !== "undefined") {
      const isLight = localStorage.getItem("theme");
      if (isLight) return JSON.parse(isLight);
      localStorage.setItem("theme", "true");
    }
    return true;
  });
  const session = useSession();
  // const data = trpc.auth.getData.useQuery(
  //   undefined, // no input
  //   { enabled: session.data?.user !== undefined }
  // );
  const startData = trpc.auth.getLatestBoard.useQuery(
    undefined, // no input
    { enabled: session.data?.user !== undefined }
  );
  const startBoard = startData.data as QBoard;
  console.log(startBoard);
  const [state, dispatch] = useReducer(reducer, startBoard);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        className={`${
          isLight ? "" : "dark"
        } flex  h-screen w-screen overflow-hidden`}
      >
        <div className="bg-purple">lll</div>
        <div className="bg-red">
          <main
            className={` bg-lightGrey dark:bg-darkGrey 
           `}
          >
            <div className="my-4">
              <Button cType="primaryS" onClick={() => setIsLight(!isLight)}>
                Button Primary (S)
              </Button>
            </div>
            <div className="my-4">
              <Button cType="secondary">Button secondary</Button>
            </div>
            <div className="my-4">
              <Button cType="destructive">Button destructive</Button>
            </div>
            <div className="my-4">
              <Button cType="primaryL">Button Primary (L)</Button>
            </div>
          </main>
        </div>
      </div>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-2xl text-center text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
